doctype html
html(lang='en')
  head
    meta(charset="utf-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    title Mongoose API v#{package.version}
    include ./includes/favicon.jade
    link( rel="stylesheet"
          href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css")
    link(href='//fonts.googleapis.com/css?family=Anonymous+Pro:400,700|Droid+Sans+Mono|Open+Sans:400,700|Linden+Hill|Quattrocento:400,700|News+Cycle:400,700|Antic+Slab|Cabin+Condensed:400,700', rel='stylesheet', type='text/css')
    link(href='css/default.css', rel='stylesheet', type='text/css')
    link(href='css/api.css', rel='stylesheet', type='text/css')
  body.api
    a#forkbanner(href="http://github.com/Automattic/mongoose")
      img(style="position: absolute; top: 0; right: 0; border: 0;", src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png", alt="Fork me on GitHub")
    #links
      #header
        h1
          a(href="../index.html")
            .mongoose Mongoose
      include includes/nav
      hr
      .doclinks
        each item in docs
          div.file(class=item.hasPublic ? '' : 'private')
            span.toggle-item
              a.section(href='#' + item.cleantitle)
                | #{item.title}
              | &nbsp;
              i.fa.fa-caret-right
            ul
              each method in item.methods
                if method.ctx && !method.ignore
                  li(class= method.isPrivate ? 'private' : '')
                    case method.ctx.type
                      when 'method'
                        id = method.ctx.constructor + '-' + method.ctx.name
                      when 'function'
                        id = method.ctx.name
                      default
                        id = ''
                    url = href(klass(item.title) + '_' + id)
                    a(href='#' + url)= method.ctx.name
              each stat in item.statics
                if stat.ctx && !stat.ignore
                  li(class= stat.isPrivate ? 'private' : '')
                    case stat.ctx.type
                      when 'method'
                        id = stat.ctx.receiver + '.' + stat.ctx.name
                      when 'property'
                        id = stat.ctx.receiver + '.' + stat.ctx.name
                      when 'function'
                        id = stat.ctx.name
                    url = href(klass(item.title) + '_' + id)
                    a(href='#' + url)= stat.ctx.name
              each property in item.props
                if property.ctx && !property.ignore
                  li(class= property.isPrivate ? 'private' : '')
                    construct = property.ctx.receiver || property.ctx.constructor
                    link = href(construct) + '-' + href(property.ctx.name)
                    url = href(klass(item.title) + '_' + link)
                    a(href='#' + url)= property.ctx.name
    #content
      .controls
        label
          input(type='checkbox')
          | private
      ul
        each item in docs
          li.module(class=item.hasPublic ? '' : 'private')
            a(href=github + package.version + '/' + item.fulltitle, id=item.cleantitle)= item.title
            each method in item.methods
              div.item.method(class= method.isPrivate ? 'private' : 'public')
                if method.ctx
                  case method.ctx.type
                    when 'method'
                      id = method.ctx.constructor + '-' + method.ctx.name
                      text = method.ctx.constructor + '#' + method.ctx.name
                    when 'function'
                      id = method.ctx.name
                      text = method.ctx.name
                    default
                      text = ''
                  url = href(klass(item.title) + '_' + text)
                  h3(id= url)
                    a(href= '#' + url)
                      = text
                      | (
                      each tag, i in method.params
                        code= tag.name
                        if i+1 < method.params.length
                          | , 
                      | )
                else
                  - // console.log('\nmissing method name', method);
                  h3 MISSING method name
                != method.description.summary
                if method.params.length
                  .params
                    h4 Parameters:
                    ul
                      each tag in method.params
                        li
                          code= tag.name
                          if tag.types && tag.types.length
                            span.types
                              |  &lt;
                              each type, i in tag.types
                                != linktype(type)
                                if i+1 < tag.types.length
                                  | , 
                              | &gt; 
                          span!= tag.description
                if method.return
                  .returns
                    h4 Returns:
                    ul
                      li
                        span.types
                          |  &lt;
                          each type, i in method.return.types
                            != linktype(type)
                            if i+1 < method.return.types.length
                              | , 
                          | &gt; 
                        span= method.return.description
                if method.inherits
                  .inherits
                    h4 Inherits:
                    ul
                      li
                        != method.inherits
                if method.events && method.events.length
                  .events
                    h4 Events:
                    ul
                      each event in method.events
                        li
                          != event.string
                if method.see.length
                  .see
                    h4 See:
                    ul.see
                      each see in method.see
                        li
                          url = see.url || see.local
                          a(href=url, title=see.title || see.local)= see.title || see.url || see.local
                div.description
                  != method.description.body
                if method.code
                  span.showcode show code
                  .sourcecode
                    != hl(method.code)
                hr(class= method.isPrivate ? 'private' : '')
            each stat in item.statics
              div.item.static(class= stat.isPrivate ? 'private' : 'public')
                if stat.ctx
                  case stat.ctx.type
                    when 'method'
                      id = stat.ctx.receiver + '.' + stat.ctx.name
                      text = stat.ctx.receiver + '.' + stat.ctx.name
                    when 'static'
                      id = stat.ctx.receiver + '.' + stat.ctx.name
                      text = stat.ctx.receiver + '.' + stat.ctx.name
                    when 'property'
                      id = stat.ctx.receiver + '.' + stat.ctx.name
                      text = stat.ctx.receiver + '.' + stat.ctx.name
                    when 'function'
                      id = stat.ctx.name
                      text = stat.ctx.name
                    default
                      text = ''
                  url = href(klass(item.title) + '_' + id)
                  h3(id= url)
                    a(href= '#' + url)
                      = text
                      if 'property' != stat.ctx.type
                        | (
                        each tag, i in stat.params
                          code= tag.name
                          if i+1 < stat.params.length
                            | , 
                        | )
                else
                  - // console.log('\nmissing static name', stat);
                  h3 MISSING stat name
                != stat.description.summary
                if stat.code
                  span.showcode show code
                  .sourcecode
                    != hl(stat.code)
                if stat.params.length
                  .params
                    h4 Parameters:
                    ul
                      each tag in stat.params
                        li
                          - if (!tag.name)
                            - // console.log(tag)
                          code= tag.name
                          if tag.types && tag.types.length
                            span.types
                              |  &lt;
                              each type, i in tag.types
                                != linktype(type)
                                if i+1 < tag.types.length
                                  | , 
                              | &gt; 
                          span= tag.description
                if stat.return
                  .returns
                    h4 Returns:
                    ul
                      li
                        span.types
                          |  &lt;
                          each type, i in stat.return.types
                            != linktype(type)
                            if i+1 < stat.return.types.length
                              | , 
                          | &gt; 
                        span= stat.return.description
                if stat.inherits
                  .inherits
                    h4 Inherits:
                    ul
                      li
                        != stat.inherits
                if stat.see.length
                  .see
                    h4 See:
                    ul.see
                      each see in stat.see
                        li
                          url = see.url || see.local
                          a(href=url, title=see.title || see.local)= see.title || see.url || see.local
                != stat.description.body
                hr(class= stat.isPrivate ? 'private' : '')
            each property in item.props
              div.item.property(class= property.ignore || property.isPrivate ? 'private' : 'public')
                construct = property.ctx.receiver || property.ctx.constructor
                link = href(construct) + '-' + href(property.ctx.name)
                url = href(klass(item.title) + '_' + link)
                h3(id = url)
                  a(href= '#' + url)
                    = construct + '#'
                    span= property.ctx.name
                != property.description.full
                if property.code
                  span.showcode show code
                  .sourcecode
                    != hl(property.code)
                if property.return
                  .returns
                    h4 Returns:
                    ul
                      li
                        span.types
                          |  &lt;
                          each type, i in property.return.types
                            != linktype(type)
                            if i+1 < property.return.types.length
                              | , 
                          | &gt; 
                        span= property.return.description
                if property.see.length
                  .see
                    h4 See:
                    ul.see
                      each see in property.see
                        li
                          url = see.url || see.local
                          a(href=url, title=see.title || see.local)= see.title || see.url || see.local
                hr(class= property.isPrivate ? 'private' : '')
    script.
      document.body.className = 'load';
    include includes/googleanalytics
    script(src="/docs/js/zepto.min.js")
    script(src="/docs/js/cookies.min.js")
    script.
      $(".toggle-item").click(function() {
        if ($(this).hasClass('fa-caret-right')) {
          $(this).removeClass('fa-caret-right');
          $(this).addClass('fa-caret-down');
          $(this).parent().addClass('displayed');
        } else {
          $(this).addClass('fa-caret-right');
          $(this).removeClass('fa-caret-down');
          $(this).parent().removeClass('displayed');
        }
      });
      $(".module").on("click", ".showcode", function (e) {
        $(this).closest(".item").find(".sourcecode").first().toggle();
      });
      $("#content .controls input").on("click", function (e) {
        $(".private").toggle()
        var checked = $(this).prop('checked');
        Cookies.set('prv', checked);
      });
      ;(function(){
        var checked = 'true' === Cookies.get('prv');
        if (checked) {
          $("#content .controls input").prop('checked', 'checked');
          $(".private").show()
        }
        $("#links, #content").on("click", "a", function (e) {
          if (_gaq && this.hash) {
            _gaq.push(['_trackEvent', 'anchor', 'click', this.hash])
          }
        })
      })()
