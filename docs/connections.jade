extends layout

block content
  h2 Connections
  :markdown
    We may connect to MongoDB by utilizing the `mongoose.connect()` method.

  :js
    mongoose.connect('mongodb://localhost/myapp');

  :markdown
    This is the minimum needed to connect the `myapp` database running locally on the default port (27017). We may also specify several more parameters in the `uri` depending on your environment:

  :js
    mongoose.connect('mongodb://username:password@host:port/database?options...');

  :markdown
    See the [mongodb connection string spec](http://docs.mongodb.org/manual/reference/connection-string/) for more detail.

  h3#options Options
  :markdown
    The `connect` method also accepts an `options` object which will be passed on to the underlying driver. All options included here take precedence over options passed in the connection string.

  :js
    mongoose.connect(uri, options);

  :markdown
    The following option keys are available:

         db      - passed to the connection db instance
         server  - passed to the connection server instance(s)
         replset - passed to the connection ReplSet instance
         user    - username for authentication (if not specified in uri)
         pass    - password for authentication (if not specified in uri)
         auth    - options for authentication
         mongos  - Boolean - if true, enables High Availability support for mongos
    Example:
  :js
    var options = {
      db: { native_parser: true },
      server: { poolSize: 5 },
      replset: { rs_name: 'myReplicaSetName' },
      user: 'myUserName',
      pass: 'myPassword'
    }
    mongoose.connect(uri, options);
  :markdown
    **Note:**
    The server option `auto_reconnect` is defaulted to true which _can_ be overridden.
    The db option `forceServerObjectId` is set to false which _cannot_ be overridden.

    See the [driver](https://github.com/mongodb/node-mongodb-native) for more information about available options.

  h4#keepAlive A note about keepAlive
  .important
    :markdown
      For long running applictions it is often prudent to enable `keepAlive`. Without it, after some period of time you may start to see `"connection closed"` errors for what seems like no reason. If so, after [reading this](http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html), you may decide to enable `keepAlive`:

  :js
    options.server.socketOptions = options.replset.socketOptions = { keepAlive: 1 };
    mongoose.connect(uri, options);

  h3#replicaset_connections ReplicaSet Connections
  :markdown
    The same method is used to connect to a replica set but instead of passing a single `uri` we pass a comma delimited list of `uri`s.

  :js
    mongoose.connect('mongodb://username:password@host:port/database,mongodb://username:password@host:port,mongodb://username:password@host:port?options...' [, options]);

  :markdown
    _NOTE: The `database` need only be specified in one of the `uri`s._

  h3#mongos_connections Multi-mongos support
  :markdown
    High availability over multiple `mongos` instances is also supported. Pass a connection string for your `mongos` instances and set the `mongos` option to true:
  :js
    mongoose.connect('mongodb://mongosA:27501,mongosB:27501', { mongos: true }, cb);

  h3#multiple_connections Multiple connections
  :markdown
    So far we've seen how to connect to MongoDB using Mongoose's default connection. At times we may need multiple connections open to Mongo, each with different read/write settings, or maybe just to different databases for example. In these cases we can utilize `mongoose.createConnection()` which accepts all the arguments already discussed and returns a fresh connection for you.

  :js
    var conn = mongoose.createConnection('uri,uri,uri...', options);

  :markdown
    This [connection](./api.html#connection_Connection) object can then be used for creating and retrieving [models](./api.html#model_Model) that are scoped only to this specific connection.

  h3#connection_pools Connection pools
  :markdown
    Each `connection`, whether created with `mongoose.connect` or `mongoose.createConnection` are all backed by an internal configurable connection pool defaulting to a size of 5. Adjust the pool size using your connection options:

  :js
    // single server
    var uri = 'mongodb://localhost/test';
    mongoose.createConnection(uri, { server: { poolSize: 4 }});

    // for a replica set
    mongoose.createConnection(uri, { replset: { poolSize: 4 }});

    // passing the option in the URI works with single or replica sets
    var uri = 'mongodb://localhost/test?poolSize=4';
    mongoose.createConnection(uri);

  h3#next Next Up
  :markdown
    Now that we've covered `connections`, let's take a look at how we can break pieces of our functionality out into reusable and shareable [plugins](/docs/plugins.html).
