extends layout

block append style
  style.
    hr {
      display: block;
      margin: 30px 0;
    }

block content
  h2 FAQ
  :markdown
    **Q**. Why don't my changes to arrays get saved when I update an element
    directly?
  :js
    doc.array[3] = 'changed';
    doc.save();
  :markdown
    **A**. Mongoose doesn't create getters/setters for array indexes; without
    them mongoose never gets notified of the change and so doesn't know to
    persist the new value. The work-around is to use
    [MongooseArray#set](./api.html#types_array_MongooseArray.set) available
    in **Mongoose >= 3.2.0**.
  :js
    // 3.2.0
    doc.array.set(3, 'changed');
    doc.save();

    // if running a version less than 3.2.0, you must mark the array modified before saving.
    doc.array[3] = 'changed';
    doc.markModified('array');
    doc.save();
  hr#date_changes
  :markdown
    **Q**. Why don't in-place modifications to date objects
    (e.g. `date.setMonth(1);`) get saved?
  :js
    doc.createdAt.setDate(2011, 5, 1);
    doc.save(); // createdAt changes won't get saved!
  :markdown
    **A**. Mongoose currently doesn't watch for in-place updates to date
    objects. If you have need for this feature, feel free to discuss on
    [this GitHub issue](https://github.com/Automattic/mongoose/issues/3738).
    There are several workarounds:
  :js
    doc.createdAt.setDate(2011, 5, 1);
    doc.markModified('createdAt');
    doc.save(); // Works
  :js
    doc.createdAt = new Date(2011, 5, 1).setHours(4);
    doc.save(); // Works
  
  hr#enable_debugging
  :markdown
    **Q**. How can I enable debugging?

    **A**. Set the `debug` option to `true`:
  :js
    mongoose.set('debug', true)
  :markdown
    All executed collection methods will log output of their arguments to your console.
  hr#callback_never_executes
  :markdown
    **Q**. My `save()` callback never executes. What am I doing wrong?

    **A**. All `collection` actions (insert, remove, queries, etc.) are queued until the `connection` opens. It is likely that an error occurred while attempting to connect. Try adding an error handler to your connection.
  :js
    // if connecting on the default mongoose connection
    mongoose.connect(..);
    mongoose.connection.on('error', handleError);

    // if connecting on a separate connection
    var conn = mongoose.createConnection(..);
    conn.on('error', handleError);
  hr#creating_connections
  :markdown
    **Q**. Should I create/destroy a new connection for each database operation?

    **A**. No. Open your connection when your application starts up and leave it open until the application shuts down.
  hr#overwrite-model-error
  :markdown
    **Q**. Why do I get "OverwriteModelError: Cannot overwrite .. model once
    compiled" when I use nodemon / a testing framework?
    
    **A**. `mongoose.model('ModelName', schema)` requires 'ModelName' to be
    unique, so you can access the model by using `mongoose.model('ModelName')`.
    If you put `mongoose.model('ModelName', schema);` in a
    [mocha `beforeEach()` hook](https://mochajs.org/#hooks), this code will
    attempt to create a new model named 'ModelName' before **every** test,
    and so you will get an error. Make sure you only create a new model with
    a given name **once**. If you need to create multiple models with the
    same name, create a new connection and bind the model to the connection.
  :js
    var mongoose = require('mongoose');
    var connection = mongoose.createConnection(..);

    // use mongoose.Schema
    var kittySchema = mongoose.Schema({ name: String });
    
    // use connection.model
    var Kitten = connection.model('Kitten', kittySchema);

  hr
  :markdown
    **Something to add?**

    If you'd like to contribute to this page, please [visit it](https://github.com/Automattic/mongoose/tree/master/docs/faq.jade) on github and use the [Edit](https://github.com/blog/844-forking-with-the-edit-button) button to send a pull request.
  br
